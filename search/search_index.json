{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mail Handler Generate emails through the template and send mails Prerequisite Python 3 click Usage This CLI tool is designed as two steps to avoid accidental sending. Step 1: Install pycontw-mail-handler through pipx (or install in your virtual environment) # Install pipx python -m pip install pipx # Install pycontw-mail-hanlder through pipx python -m pipx install pycontw-mail-handler After install pycontw-mail-handler , you can run render_mail and send_mail commands in your environment. Step 2: Generate mails through the template render_mail [OPTIONS] TEMPLATE_PATH RECEIVER_DATA Options: --mails_path PATH [default: mails_to_sent] TEMPLATE_PATH : The path to the jinja2 template. RECEIVER_DATA : The path to receivers' data. The following json sample is the least required content. All other data can be added to fit the need of the template. \"common_data\": Common data used in each mail \"unique_data\": Unique content for each mail { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec@somedomain\"} ] } Please note the comma is able to be used as a receiver separator to send multiple people. For example, the following 3 formats are all working: A space following a comma { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain, somerec02@somedomain\"} ] } No space following a comma { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain,somerec02@somedomain\"} ] } Or mix both of the above two types { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain, somerec02@somedomain,somerec03@somedomain\"} ] } --mails_path PATH : The output path of the mails. The mail will be named as the receivers email address. Usage example: render_mail ./templates/sponsorship/spam_sponsors_2020.j2 examples/sponsorship/spam_sponsors_2020.json Step 3: Send the generated mails send_mail [OPTIONS] CONFIG_PATH Options: --mails_path PATH [default: mails_to_sent] --attachment_file PATH CONFIG_PATH : The path to mail config. { \"Subject\": \"some subject\", \"From\": \"somebody@somedomain\", \"CC\": \"somebody1@somedomain, somebody2@somedomain\" } Please note the comma is used as a receiver separator to send multiple people. --mails_path PATH : The path of the mails to sent. Usage example: send_mail ./examples/sponsorship/spam_sponsors_2020_mail_config.json By issuing the send_mail.py command, you will be prompted to input the corresponding password of your smtp server. You are about to send the mails under \"mails_to_sent\". Do you want to continue? [y/N]: y Please enter your mail account: <sender email address in mail config> Please enter you mail password: INFO:root:Email sent to <receiver address in RECEIVER_DATA>! Currently we only support the smtp server of gmail , so you may want to use the one-time app password for security concern. To use gmail one-time app password, please go to Manage your Goolge Account > Security > Signning to Google > App passwords and then Select app > Other to generate your one-time app password. The generated password could be removed anytime if you are sure that you won't use it anymore. Contributing See Contributing Authors Lee-W","title":"Home"},{"location":"#mail-handler","text":"Generate emails through the template and send mails","title":"Mail Handler"},{"location":"#prerequisite","text":"Python 3 click","title":"Prerequisite"},{"location":"#usage","text":"This CLI tool is designed as two steps to avoid accidental sending.","title":"Usage"},{"location":"#step-1-install-pycontw-mail-handler-through-pipx-or-install-in-your-virtual-environment","text":"# Install pipx python -m pip install pipx # Install pycontw-mail-hanlder through pipx python -m pipx install pycontw-mail-handler After install pycontw-mail-handler , you can run render_mail and send_mail commands in your environment.","title":"Step 1: Install pycontw-mail-handler through pipx (or install in your virtual environment)"},{"location":"#step-2-generate-mails-through-the-template","text":"render_mail [OPTIONS] TEMPLATE_PATH RECEIVER_DATA Options: --mails_path PATH [default: mails_to_sent] TEMPLATE_PATH : The path to the jinja2 template. RECEIVER_DATA : The path to receivers' data. The following json sample is the least required content. All other data can be added to fit the need of the template. \"common_data\": Common data used in each mail \"unique_data\": Unique content for each mail { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec@somedomain\"} ] } Please note the comma is able to be used as a receiver separator to send multiple people. For example, the following 3 formats are all working: A space following a comma { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain, somerec02@somedomain\"} ] } No space following a comma { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain,somerec02@somedomain\"} ] } Or mix both of the above two types { \"common_data\": {}, \"unique_data\": [ {\"receiver_email\": \"somerec01@somedomain, somerec02@somedomain,somerec03@somedomain\"} ] } --mails_path PATH : The output path of the mails. The mail will be named as the receivers email address. Usage example: render_mail ./templates/sponsorship/spam_sponsors_2020.j2 examples/sponsorship/spam_sponsors_2020.json","title":"Step 2: Generate mails through the template"},{"location":"#step-3-send-the-generated-mails","text":"send_mail [OPTIONS] CONFIG_PATH Options: --mails_path PATH [default: mails_to_sent] --attachment_file PATH CONFIG_PATH : The path to mail config. { \"Subject\": \"some subject\", \"From\": \"somebody@somedomain\", \"CC\": \"somebody1@somedomain, somebody2@somedomain\" } Please note the comma is used as a receiver separator to send multiple people. --mails_path PATH : The path of the mails to sent. Usage example: send_mail ./examples/sponsorship/spam_sponsors_2020_mail_config.json By issuing the send_mail.py command, you will be prompted to input the corresponding password of your smtp server. You are about to send the mails under \"mails_to_sent\". Do you want to continue? [y/N]: y Please enter your mail account: <sender email address in mail config> Please enter you mail password: INFO:root:Email sent to <receiver address in RECEIVER_DATA>! Currently we only support the smtp server of gmail , so you may want to use the one-time app password for security concern. To use gmail one-time app password, please go to Manage your Goolge Account > Security > Signning to Google > App passwords and then Select app > Other to generate your one-time app password. The generated password could be removed anytime if you are sure that you won't use it anymore.","title":"Step 3: Send the generated mails"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#authors","text":"Lee-W","title":"Authors"},{"location":"contributing/","text":"Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/[YOUR GITHUB ACCOUNT]/mail_handler.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/pycontw/mail_handler\" You can pull the latest code in master branch through git pull upstream master afterward. Step 4. Check out a branch for your new feature git checkout -b [YOUR FEATURE] Step 5. Install prerequisite python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management Step 6. Create your local Python virtual environment and install dependencies inv env.init-dev Step 7. Work on your new feature Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint Step 12. Run security check Ensure the packages installed are secure, and no server vulnerability is introduced inv secure Step 13. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/[YOUR GITHUB ACCOUNT]/mail_handler.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/pycontw/mail_handler\" You can pull the latest code in master branch through git pull upstream master afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [YOUR FEATURE]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequisite","text":"python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management","title":"Step 5. Install prerequisite"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","text":"inv env.init-dev","title":"Step 6. Create your local Python virtual environment and install dependencies"},{"location":"contributing/#step-7-work-on-your-new-feature","text":"Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit","title":"Step 7. Work on your new feature"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#step-12-run-security-check","text":"Ensure the packages installed are secure, and no server vulnerability is introduced inv secure","title":"Step 12. Run security check"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","text":"","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89"}]}